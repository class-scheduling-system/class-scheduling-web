/**
 * SystemDTO
 */
export type SystemInfoEntity = {
    /**
     * CPU 核心数
     * <p>
     * 该变量用于存储系统的 CPU 核心数。CPU 核心数表示系统中物理或逻辑处理器的数量，对于评估系统的处理能力和性能至关重要。
     * 例如，一个四核的 CPU 表示有四个独立的处理单元。
     * </p>
     */
    cpu_cores: number;
    /**
     * CPU 名称
     * <p>
     * 该变量用于存储系统的 CPU 名称。CPU 名称通常是制造商提供的唯一标识符，可以帮助识别 CPU 的型号和规格。
     * 例如，Intel Core i7-9700K 或 AMD Ryzen 5 3600。
     * </p>
     */
    cpu_name: string;
    /**
     * CPU 使用率
     * <p>
     * 该变量表示系统当前的 CPU 使用率，值的范围从 0.0 到 1.0。其中 0.0 表示没有使用 CPU 资源，1.0 表示 CPU 资源被完全占用。
     * </p>
     */
    cpu_usage: number;
    /**
     * 空闲磁盘空间
     * <p>
     * 该变量用于存储系统当前的空闲磁盘空间大小，单位为 MB。空闲磁盘空间表示系统中未被使用的磁盘容量，
     * 可以帮助监控系统的磁盘使用情况和性能状况。例如，如果{@code freeDiskSpace} 的值为 1024.0，则表示系统有 1GB 的空闲磁盘空间。
     * </p>
     */
    free_disk_space: number;
    /**
     * 空闲内存大小
     * <p>
     * 该变量用于存储系统当前的空闲内存量，单位为 MB。空闲内存表示系统中未被使用的内存量，
     * 可以帮助监控系统的内存使用情况和性能状况。例如，如果{@code freeMemory} 的值为 2048.0，则表示系统有 2GB 的空闲内存。
     * </p>
     */
    free_memory: number;
    /**
     * 初始堆内存大小
     * <p>
     * 该变量用于存储 Java 虚拟机 (JVM) 的初始堆内存大小，单位为 MB。初始堆内存是指 JVM 启动时分配给堆的内存量。
     * 通过设置合理的初始堆内存大小，可以优化应用程序的启动时间和性能。如果初始堆内存设置得太小，可能会导致频繁的垃圾回收；
     * 反之，如果设置得太大，则可能会浪费系统资源。合理配置初始堆内存对于提高系统响应时间和稳定性非常重要。
     * </p>
     */
    heap_memory_init: number;
    /**
     * 最大堆内存大小
     * <p>
     * 该变量用于存储 Java 虚拟机 (JVM) 的最大堆内存大小，单位为 MB。最大堆内存是指 JVM 在运行过程中可以分配给堆的最大内存量。
     * 通过设置合理的最大堆内存大小，可以优化应用程序的性能和稳定性。如果最大堆内存设置得太小，可能会导致频繁的垃圾回收；
     * 反之，如果设置得太大，则可能会浪费系统资源。合理配置最大堆内存对于提高系统响应时间和稳定性非常重要。
     * </p>
     */
    heap_memory_max: number;
    /**
     * 已使用的堆内存大小
     * <p>
     * 该变量用于存储 Java 虚拟机 (JVM) 当前已使用的堆内存大小，单位为 MB。堆内存是 JVM 用于存储对象实例的内存区域。
     * 通过监控{@code heapMemoryUsed} 的值，可以了解应用程序在运行时对堆内存的使用情况，从而进行性能分析和优化。
     * 如果堆内存使用量过高，可能会导致频繁的垃圾回收，影响系统的响应时间和性能。合理管理堆内存使用对于提高系统稳定性和性能至关重要。
     * </p>
     */
    heap_memory_used: number;
    /**
     * 操作系统架构
     * <p>
     * 该变量用于存储系统的操作系统架构。操作系统架构是指系统所运行的处理器架构类型，例如 x86、x86_64 或 ARM。
     * 通过该值可以了解系统的处理器架构，对于评估系统的兼容性和支持情况非常有用。
     * </p>
     */
    os_architecture: string;
    /**
     * 操作系统名称
     * <p>
     * 该变量用于存储系统的操作系统名称。操作系统名称通常是操作系统的简短标识符，例如 "Windows"、"macOS" 或 "Linux"。
     * 通过该值可以了解系统运行的操作系统类型，对于评估系统的兼容性和支持情况非常有用。
     * </p>
     */
    os_name: string;
    /**
     * 操作系统版本
     * <p>
     * 该变量用于存储系统的操作系统版本。操作系统版本通常是指操作系统的具体版本号，可以帮助识别系统的详细信息。
     * 例如，Windows 10 的版本可能是 20H2，macOS Big Sur 的版本可能是 11.6，Ubuntu 的版本可能是 20.04 LTS。
     * 通过该值可以了解系统的具体版本信息，对于评估系统的兼容性和支持情况非常有用。
     * </p>
     */
    os_version: string;
    /**
     * 总磁盘空间
     * <p>
     * 该变量用于存储系统总磁盘空间大小，单位为 MB。它表示当前系统中总的磁盘空间量。
     * 通过该值可以了解系统的磁盘容量，对于监控系统的存储情况和性能状况非常有用。
     * </p>
     */
    total_disk_space: number;
    /**
     * 总内存大小
     * <p>
     * 该变量用于存储系统总内存大小（以字节为单位）。它表示当前系统中可用的物理内存总量。
     * </p>
     */
    total_memory: number;
}